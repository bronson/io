- The way you select a poller now (-DUSE_EPOLL, -DUSE_POLL, -DUSE_SELECT) is totally wack.
- iotest needs to read to exhaustion.
- Should call readproc and writeproc directly.  No need for flags.  Also have a closeproc I guess?
- Normalize errors returned from calls.  
- iotest and socktest need to print an error if write data was discarded.
- Pass MAXFDS and MAXEVENTS to io_init.  That should normalize all the maxfd junk lying around.
- Add an io-config utility much like mutest-config
- I don't like the macros to convert io_del into io_select_del.  Anything better we can do?
- need to try to regain type safety in multi.c:io_init.  get rid of all those void*!
- get rid of IO_EXCEPT -- this seems like an artifact of select, and it's going away.  Overload IO_READ to handle it maybe.
- turn io_fd_check into io_get_next_atom.  Need some way to query the atoms that are still in use.  Should also return atom's read status.
- TODO TODO add unit tests (maybe) and lots of functional tests (definitely!)
- Modify socktest to not lose data when it encounters a partial write.
- Reading to exhaustion can result in starvation of slower connections.
  It might be better to cap reads at some amount and remember to read from
  the fd the next time thru the event loop (even though it won't have an
  event).

* Got rid of the multiplexer -- we now dispatch straight to read_func and write_func.
* Got rid of IO_EXCEPT.  There's no need to use this in normal usage.
* Removed io_enable and io_disable, they're just too slow to live.
* Made the socktest example a lot more correct.
* Unified pollers into a single poller structure.
* Made the pollers thread-safe (got rid of all globals)

