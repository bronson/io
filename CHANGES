- The way you select a poller now (-DUSE_EPOLL, -DUSE_POLL, -DUSE_SELECT) is wack.
  Figure out how to sniff compiler #defines to figure out what pollers are available.
- Normalize errors returned from calls.  
- iotest and socktest need to print an error if write data was discarded.
- Pass MAXFDS and MAXEVENTS to io_init.  That should normalize all the maxfd junk lying around.
- Add an io-config utility much like mutest-config
- I don't like the macros to convert io_del into io_select_del.  Anything better we can do?
- need to try to regain type safety in multi.c:io_init.  get rid of all those void*!
- turn io_fd_check into io_get_next_atom.  Need some way to query the atoms that are still in use.  Should also return atom's read status.
- TODO TODO add unit tests (maybe) and lots of functional tests (definitely!)
- Make socket.c IPv6 aware, http://people.redhat.com/drepper/userapi-ipv6.html
    Of course... probably want to leave the ipv4 hooks around too, since not everything is ipv6 yet?


* Added poller_type so client can force a particular poller to be used at runtime.
* Now split the ioproc into read_proc and write_proc.  Got rid of the multiplexer.
* Got rid of IO_EXCEPT.  There's no need to use this in normal usage.
* Removed io_enable and io_disable, they're just too slow to live.
* Made the socktest example a lot more correct.
* Unified pollers into a single poller structure.
* Made the pollers thread-safe (got rid of all globals)


