TODO
- Rename socket_addr to socket_address.
- Split the static mock events into a mocker api and a static mocker.  That allows us to read mock events from files later.
  Mostly it allows us to isolate the awful hacks in the current code behind a clean API.
- Get rid of IO_READ and IO_WRITE?  I think it's a good idea.
- get rid of io_add and io_remove...  They should be handled automatically by all other calls.
- Rename poller.h to io.h -- it's the .h file that should be included by everything.
- The way you select a poller now (-DUSE_EPOLL, -DUSE_POLL, -DUSE_SELECT) is wack.
  Figure out how to sniff compiler #defines to figure out what pollers are available.
- Normalize errors returned from calls.  Ensure all pollers return well-defined, predictable errors.
- iotest and socktest need to print an error if write data was discarded.
- Fix the io_parse_address routine -- its return value currently sucks rocks.
- Pass MAXFDS and MAXEVENTS to io_init.  That should normalize all the maxfd junk lying around.
- Add an io-config utility much like mutest-config
- I don't like the macros to convert io_del into io_select_del.  Anything better we can do?
- need to try to regain type safety in multi.c:io_init.  get rid of all those void*!
- turn io_fd_check into io_get_next_atom.  Need some way to query the atoms that are still in use.  Should also return atom's read status.
- TODO TODO add unit tests (maybe) and lots of functional tests (definitely!)
- Make socket.c IPv6 aware, http://people.redhat.com/drepper/userapi-ipv6.html
    Of course... probably want to leave the ipv4 hooks around too, since not everything is ipv6 yet?
- io_wait is now the only call that doesn't return an error code...  (it returns the number of fds containing events)   Is this OK?
- Returning EPIPE for 0-length reads is pretty stupid.  But we have to return SOME error.  Is there a better alternative?

DONE:
* Try to standardize return codes: every one returns an error code or 0 on no error.
  (except for io_wait, which still returns the # of events that need to be dispatched).
* Added io_close.  This allows mock fds to close without closing, say, stdout.
* Made io_socket_connect_fd private again.  To replace its usage, create an automatic
  io_atom on the stack, call io_socket_connect with that atom, then copy the atom
  into the final structure when it's ready.  Just trying to reduce the API.
* Added poller_type so client can force a particular poller to be used at runtime.
* Now split the ioproc into read_proc and write_proc.  Got rid of the multiplexer.
* Got rid of IO_EXCEPT.  There's no need to use this in normal usage.
* Removed io_enable and io_disable, they're just too slow to live.
* Made the socktest example a lot more correct.
* Unified pollers into a single poller structure.
* Made the pollers thread-safe (got rid of all globals)


